// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using subject_service.DbMigrator;

#nullable disable

namespace subject_service.Migrations
{
    [DbContext(typeof(SubjectServiceDbContext))]
    [Migration("20250207093815_initV1")]
    partial class initV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("subject_service.Models.ComponentPoint", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<int>("column_order")
                        .HasColumnType("integer");

                    b.Property<string>("exam_type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("is_update")
                        .HasColumnType("boolean");

                    b.Property<long>("mark_id")
                        .HasColumnType("bigint");

                    b.Property<float>("score")
                        .HasColumnType("real");

                    b.Property<string>("semester_type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<float>("weight")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("mark_id");

                    b.ToTable("component_points");
                });

            modelBuilder.Entity("subject_service.Models.Mark", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long>("school_year_id")
                        .HasColumnType("bigint");

                    b.Property<float?>("score_average")
                        .HasColumnType("real");

                    b.Property<long>("semester_id")
                        .HasColumnType("bigint");

                    b.Property<string>("student_id")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("subject_id")
                        .HasColumnType("bigint");

                    b.Property<float>("weight")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("subject_id");

                    b.ToTable("marks");
                });

            modelBuilder.Entity("subject_service.Models.Subject", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long>("grade_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("total_sessions")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("subject_service.Models.Subjects_teachers", b =>
                {
                    b.Property<long>("subject_id")
                        .HasColumnType("bigint");

                    b.Property<string>("teacher_id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("subject_id", "teacher_id");

                    b.ToTable("subjects_teachers");
                });

            modelBuilder.Entity("subject_service.Models.ComponentPoint", b =>
                {
                    b.HasOne("subject_service.Models.Mark", "Mark")
                        .WithMany("ComponentPoints")
                        .HasForeignKey("mark_id")
                        .IsRequired();

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("subject_service.Models.Mark", b =>
                {
                    b.HasOne("subject_service.Models.Subject", "Subject")
                        .WithMany("Marks")
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("subject_service.Models.Subjects_teachers", b =>
                {
                    b.HasOne("subject_service.Models.Subject", "Subject")
                        .WithMany("Subjects_teachers")
                        .HasForeignKey("subject_id")
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("subject_service.Models.Mark", b =>
                {
                    b.Navigation("ComponentPoints");
                });

            modelBuilder.Entity("subject_service.Models.Subject", b =>
                {
                    b.Navigation("Marks");

                    b.Navigation("Subjects_teachers");
                });
#pragma warning restore 612, 618
        }
    }
}
